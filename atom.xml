<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My code … :) :)]]></title>
  <link href="http://Dineshs91.github.io/atom.xml" rel="self"/>
  <link href="http://Dineshs91.github.io/"/>
  <updated>2014-04-10T13:40:22+05:30</updated>
  <id>http://Dineshs91.github.io/</id>
  <author>
    <name><![CDATA[DINESH S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A great Programmer/Hacker]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/04/10/a-programmer-or-a-hacker/"/>
    <updated>2014-04-10T12:57:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/04/10/a-programmer-or-a-hacker</id>
    <content type="html"><![CDATA[<p>I’ve always wondered what it takes to become a great programmer. I kept pondering on this question for a year. I’ve seen programmers around me, after a lot of research i found that  a programmer becomes a great programmer by following certain ideas. I am laying down some ideas which i think makes a great programmer.</p>

<ol>
<li>A great programmer always thinks how he can make a computer work the way he wants it to.</li>
</ol>


<p>The definition of Hacker by paul graham: A hacker is a person who can make the computer work the way he want’s it to work.</p>

<ol>
<li><p>Hackers don’t have a ’no’. This is the difference between a programer and a hacker. Programmer trusts his skill sets and if a problem is beyond his understanding then he will give you a ‘no’. But hackers definitely will find a workaround and they will succeed in that.</p></li>
<li><p>They write efficient, reliable and readable code naturally. They never think of it in particular.</p></li>
<li><p>As a child we used to dream a lot of things. But as time goes by we stop dreaming, our imagination becomes zero. For every fascinating thought that comes to our mind, we throw it away saying it’s impossible, such a thing could never happen. This is wrong, imagination is the one thing that has no boundaries, imagination is what brought iPod, iPhone to reality. Explore all dimensions, as steve jobs explored simplicity. Who would have thought simplicity is such an important thing. Don’t take anything for granted. Think why something is designed the way it is.</p></li>
</ol>


<p>To become a hacker.</p>

<ol>
<li>Don’t program like a fool. Imagination is the key here. Take this example,</li>
</ol>


<p>int a = 10;</p>

<p>Ordinay programmer’s thought: Variable a with value 10</p>

<p>Great programmer’s thought: Variable a with value 10 and takes 2 bytes of memory. He imagines a box with value 10. It occupies some space(which is memory).</p>

<p>It is evident from the example that the difference is the way they think. As you program build something in your mind. This will give you amazing results. Don’t simply program, live with it.</p>

<ol>
<li><p>You will require a lot of skills. Programming is just the beginning. It is the thinking that is important. Say for example, you have learnt C language. You are an expert in it. But what will you do with it. It’s like learning english and never speaking in english. So an idea is important. Linus torvalds idea was to create a UNIX like operating system, so he created it. As you can see idea is the first part, programming comes later. He used his skills to create linux. Similarly Facebook was an idea, so was amazon. So “THINK FIRST CODE LATER”.</p></li>
<li><p>Time management is very important. There are a gazillion things you can do or learn in computers. After a while you will understand that you cannot learn or do all of them. Find what you are really interested in, prioritise your goals and work towards them.</p></li>
<li><p>Hackers love to work on challenging problems. They love to challenge themselves.</p></li>
</ol>


<p>Remember, the key to become a hacker is THINKING. Great innovations come not because of someone’s talents/skills, but come’s with their ideas.</p>

<p>Be patient, do what you love you will always succeed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exor sum of all non empty subsets in a list]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/03/16/exor-sum-of-all-non-empty-subsets-in-a-list/"/>
    <updated>2014-03-16T12:33:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/03/16/exor-sum-of-all-non-empty-subsets-in-a-list</id>
    <content type="html"><![CDATA[<p>Consider one bit position at a time. How many of the terms have bit i set? The terms that have bit i set are exactly those that correspond to a subset that contains an odd number of inputs that have bit i set.</p>

<p>If there is any input that has bit i set, then exactly half of the 2N possible subsets will be of this form, and so they will contribute 2N−1+i to the final sum.</p>

<p>On the other hand, if no input has bit i set, then of course no terms will have that bit set either.</p>

<p>Summing these contributions of 2N−1+i per bit position is easy enough &mdash; the final sum will simply be 2N−1 times the bitwise OR of all the inputs.</p>

<p>soon: (2 ** (N &ndash; 1)) * bitwise OR of all the inputs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sieve of eratosthenes]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/03/09/sieve-of-eratosthenes/"/>
    <updated>2014-03-09T14:02:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/03/09/sieve-of-eratosthenes</id>
    <content type="html"><![CDATA[<p>Sieve of eratosthenes is used to find the prime numbers.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def sieve(limit):
</span><span class='line'>    p = [True] * limit
</span><span class='line'>    p[0] = p[1] = False
</span><span class='line'>    for i, isprime in enumerate(p):
</span><span class='line'>        if isprime:
</span><span class='line'>            for n in xrange(i * i, limit, i):
</span><span class='line'>                p[n] = False
</span><span class='line'>    return p
</span><span class='line'>
</span><span class='line'>p = sieve(100)
</span><span class='line'>for i, j in enumerate(p):
</span><span class='line'>    print i,’—>’,j</span></code></pre></td></tr></table></div></figure>


<p>sieve(100) &ndash; Has a list of first 100 numbers and whether they are prime or not.</p>

<p>Runtime: O(log log n)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BFS]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/02/01/bfs/"/>
    <updated>2014-02-01T00:44:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/02/01/bfs</id>
    <content type="html"><![CDATA[<p>Breadth First Search (BFS).</p>

<p>BFS explores in levels. It explores all the nodes and then moves to the next node unlike DFS which explores the nodes of siblings until a node doesn’t have a sibling. BFS moves like a wave. Here a queue is used.</p>

<p>The path found using BFS is the shortest path. BFS takes less time than DFS to explore. But it can take more memory which depends on the branching factor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamically add rows to a table]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/02/01/dynamically-add-rows-to-a-table/"/>
    <updated>2014-02-01T00:28:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/02/01/dynamically-add-rows-to-a-table</id>
    <content type="html"><![CDATA[<p>If you want to dynamically add rows to an existing table use clone.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tr = $(‘table tbody tr:last’).clone();
</span><span class='line'>tr.appendTo($(‘table’));</span></code></pre></td></tr></table></div></figure>


<p>This adds rows at the bottom of the table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialize a form]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/02/01/serialize-a-form/"/>
    <updated>2014-02-01T00:25:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/02/01/serialize-a-form</id>
    <content type="html"><![CDATA[<p>This method creates a text string in standard URL-encoded notation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(‘form’).serialize();</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibonacci number]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/31/fibonacci-number/"/>
    <updated>2014-01-31T23:59:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/31/fibonacci-number</id>
    <content type="html"><![CDATA[<p>A number is a fibonacci number if 5*N2 +&ndash; 4 is a perfect square. sqrt(r1) % 1 == 0. This is for checking if the number is a perfect square.</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>r1 = sqrt(5*n**2+4)
</span><span class='line'>r2 = sqrt(5*n**2-4)
</span><span class='line'>isSquare = r1 % 1 == 0 or r2 % 1 == 0
</span><span class='line'>if(isSquare):
</span><span class='line'>    print “isFibo”</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making enter button to work from dropdown box]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/23/making-enter-button-to-work-from-dropdown-box/"/>
    <updated>2014-01-23T22:00:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/23/making-enter-button-to-work-from-dropdown-box</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>lang: javascript </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(‘select’).live(‘key press’, function(e){
</span><span class='line'>    if(e.which == 13){
</span><span class='line'>  $(‘form’).submit();
</span><span class='line'>    }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Position property in css]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/23/position-property-in-css/"/>
    <updated>2014-01-23T00:31:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/23/position-property-in-css</id>
    <content type="html"><![CDATA[<p>This property is very important in css.</p>

<p>It can have the following values</p>

<ol>
<li>Absolute</li>
<li>Fixed</li>
<li>Relative</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing property of an element]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/23/accessing-property-of-an-element/"/>
    <updated>2014-01-23T00:17:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/23/accessing-property-of-an-element</id>
    <content type="html"><![CDATA[<p>For accessing the property of an element, select the element using a valid selector and use prop().</p>

<figure class='code'><figcaption><span>lang: javascript </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(‘ ‘).prop(‘disabled’, false);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usage of defaultdict]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/14/usage-of-defaultdict/"/>
    <updated>2014-01-14T08:55:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/14/usage-of-defaultdict</id>
    <content type="html"><![CDATA[<p>defaultdict is a built in function in python. It is available in collections package.</p>

<p>1.) 1st usage. If you want to know the frequency of characters in a word,</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from collections import defaultdict
</span><span class='line'>
</span><span class='line'>a = “Amazon”
</span><span class='line'>res = defaultdict(int)
</span><span class='line'>for k in a:
</span><span class='line'>    res[k] += 1
</span><span class='line'>print res</span></code></pre></td></tr></table></div></figure>


<p>The result is {&lsquo;A&rsquo;: 1, &rsquo;m&#8217;: 1, &lsquo;a&rsquo;: 1, &lsquo;z&rsquo;: 1, &lsquo;o&rsquo;: 1, &lsquo;n&rsquo;: 1}
This program is case sensitive so it counts ‘A’ and ‘a’ seperately. If you want the program to be case insensitive just change to a.lower() in for loop.</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from collections import defaultdict
</span><span class='line'>
</span><span class='line'>a = “Amazon”
</span><span class='line'>res = defaultdict(int)
</span><span class='line'>for k in a.lower():
</span><span class='line'>    res[k] += 1
</span><span class='line'>print res</span></code></pre></td></tr></table></div></figure>


<p>The result is {&lsquo;a&rsquo;: 2, &rsquo;m&#8217;: 1, &lsquo;z&rsquo;: 1, &lsquo;o&rsquo;: 1, &lsquo;n&rsquo;: 1}</p>

<p>2.) Using a list in defaultdict.</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s = [(‘yellow’, 1), (‘blue’, 2), (‘yellow’, 3), (‘blue’, 4)]
</span><span class='line'>d = defaultdict(list)
</span><span class='line'>for k, v in s:
</span><span class='line'>    d[k].append(v)</span></code></pre></td></tr></table></div></figure>


<p>The result is [(&lsquo;blue&rsquo;, [2, 4]), (&lsquo;yellow&rsquo;, [1, 3])]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DFS Demystified]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/11/dfs-demystified/"/>
    <updated>2014-01-11T19:29:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/11/dfs-demystified</id>
    <content type="html"><![CDATA[<p>Depth First Search (DFS).</p>

<p>A DFS explores a path all the way to a leaf before backtracking and exploring another path.</p>

<p>DFS always expands one of the nodes at the deepest level of the tree.
The search goes back once it hits a dead end.</p>

<p>Strategy of DFS is to search deeper in the graph whenever possible.</p>

<p>DFS progresses by expanding the first child node of the search tree that appears and thus going deeper and deeper until a goal node is found, or until it hits a node that has no children. Then the search backtracks, returning to the most recent node it hasn’t finished exploring.</p>

<p>Advantages of DFS:</p>

<ol>
<li>It is cheap on memory.</li>
<li>It can use recursion.</li>
<li>It is better when there are many solution nodes.</li>
</ol>


<p>Performance parameters:</p>

<ol>
<li>Completeness: Is algorithm guaranteed to find a solution if one exists.</li>
<li>Optimality: Whether the algorithm finds the optimal solution.</li>
<li>Time complexity: How long the algorithm takes the find the solution.</li>
<li>Space complexity: How much memory is needed.</li>
</ol>


<p>Measuring complexity:</p>

<ol>
<li>Branching factor(b): Maximum number of successors of any node.</li>
<li>Depth(m): Shallowest goal node in number of steps or levels.</li>
<li>Maximum depth: Maximum depth of the search tree.</li>
</ol>


<p>Analysis:</p>

<p>Time: O(|V| + |E|)
Space: O(|V|)</p>

<p>Application:</p>

<p>Search problems in artificial intelligence.</p>

<p>Algorithm:</p>

<p>Visit a node, then push all of the nodes to be visited onto the stack. To find the next node to visit we simply pop a node of the stack, and then push all the nodes connected to that one onto the stack as well and we continue doing this until all nodes are visited.</p>

<p>There are 2 ways of doing this.</p>

<ol>
<li><p>Using stack.</p></li>
<li><p>Using recursion.</p></li>
</ol>


<p>DFS(v):</p>

<pre><code>visited[v] = 1
for all w adjacent to v:
    if !visited:
        DFS(w)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[alphabet-frequency]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/08/07/alphabet-frequency/"/>
    <updated>2013-08-07T15:28:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/08/07/alphabet-frequency</id>
    <content type="html"><![CDATA[<p>Alphabet-frequency is a program i have written using python2.7 which graphically displays the frequency of letters in a specified file.
You can have a look at <a href="https://github.com/Dineshs91/alphabet-frequency">https://github.com/Dineshs91/alphabet-frequency</a> .</p>

<p>You require matplotlib and numpy modules to run this program.</p>

<p>In the first few lines i have imported the necessary modules. Matplotlib module is used for plotting data. arparse module is used for command line argument parsing.</p>

<p>There are a lot of options which you can provide. The default option is alphabets(lower and upper case). This is a very simple program. You can understand it by looking at the code itself. Output is a graph which shows how frequently a character appears in a file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[trying google app engine]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/08/07/trying-google-app-engine/"/>
    <updated>2013-08-07T15:10:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/08/07/trying-google-app-engine</id>
    <content type="html"><![CDATA[<p>If you are learning python then you got to try google app engine(GAE). Google app engine provides a infrastructure for hosting your web app. You must be knowing some html to play with it. If you have a google account, well and good otherwise create it. You need it to host your web app. Download google app engine(python) to your computer. This lets you test your app locally. You can deploy directly from the software itself. There is a course in udacity which teaches web development. It teaches it with the help of GAE If you want to have greater insight into the topic check the google developer site. You can use 10 apps for free and after that you have to pay. Creating a web app can be fun way to explore both python and web development. I agree that GAE doesn&rsquo;t require complex python but it&rsquo;s worth  a try if you are interested in web development.</p>

<p>Note: Use GAE for python.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[merge sort]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/23/merge-sort/"/>
    <updated>2013-07-23T14:38:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/23/merge-sort</id>
    <content type="html"><![CDATA[<p>Merge sort is a sorting method which uses divide and conquer algorithm. It has a running time of big oh O(N log N).</p>

<figure class='code'><figcaption><span>Merge sort lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /usr/bin/env python
</span><span class='line'>
</span><span class='line'>## Program for merge sort
</span><span class='line'>
</span><span class='line'>def divide(array):
</span><span class='line'>    if len(array) &lt; 2:
</span><span class='line'>        return array
</span><span class='line'>    length = len(array)
</span><span class='line'>    left = array[:length/2]
</span><span class='line'>    right = array[length/2:]
</span><span class='line'>    left = divide(left)
</span><span class='line'>    right = divide(right)
</span><span class='line'>    #print left, right
</span><span class='line'>    sort_array = []
</span><span class='line'>    i = 0
</span><span class='line'>    j = 0
</span><span class='line'>    while i &lt; len(left) and j &lt; len(right):
</span><span class='line'>        if left[i] &lt;= right[j]:
</span><span class='line'>            sort_array.append(left[i])
</span><span class='line'>            i += 1
</span><span class='line'>        else:
</span><span class='line'>            sort_array.append(right[j])
</span><span class='line'>            j += 1
</span><span class='line'>    while i &lt; len(left):
</span><span class='line'>        sort_array.append(left[i])
</span><span class='line'>        i += 1
</span><span class='line'>    while j &lt; len(right):
</span><span class='line'>        sort_array.append(right[j])
</span><span class='line'>        j += 1
</span><span class='line'>    return sort_array
</span><span class='line'>            
</span><span class='line'>def main():
</span><span class='line'>    array = raw_input("Enter the numbers to be sorted:")
</span><span class='line'>    array = [int(i) for i in array.split()]
</span><span class='line'>    sort_array = divide(array)
</span><span class='line'>    print sort_array
</span><span class='line'>
</span><span class='line'>if __name__ == "__main__":
</span><span class='line'>    main()</span></code></pre></td></tr></table></div></figure>


<p>If you want to use sorting in your program always use the builtin function &lsquo;sort&rsquo;. It is always efficient than what we can write.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List comprehension]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/23/list-comprehension/"/>
    <updated>2013-07-23T11:12:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/23/list-comprehension</id>
    <content type="html"><![CDATA[<p>List comprehensions are very useful. Here are some examples</p>

<p>1.) Get input and store it in a list</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> a = [raw_input() for _ in range(n)]</span></code></pre></td></tr></table></div></figure>


<p>Here &lsquo;n&rsquo; is the number of elements. For example if you want to store 5 names then &lsquo;n&rsquo; is 5.</p>

<p>2.) Convert numbers from a list which are stored in string to int</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> a = [int(i) for i in lis]</span></code></pre></td></tr></table></div></figure>


<p>Here &lsquo;lis&rsquo; is the list which contains the numbers.</p>

<p>3.) If we want a multidimensional list</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> a = [ [0 for col in range(5)] for row in range(10)]</span></code></pre></td></tr></table></div></figure>


<p>This creates a multidimensional list containing 10 rows and 5 columns.</p>

<p>4.) Get the numbers greater than 100 from another list</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> a = [i for i in lis if i > 100]</span></code></pre></td></tr></table></div></figure>


<p>&lsquo;lis&rsquo; is the list which contains the numbers. The numbers in list &lsquo;lis&rsquo; which are greater than 100 are added to list &lsquo;a&rsquo;</p>

<p>5.) If you want to add a number to all the numbers in a list</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> a = [i+3 for i in lis]</span></code></pre></td></tr></table></div></figure>


<p>We are adding 3 to all the numbers in &lsquo;lis&rsquo; and storing in &lsquo;a&rsquo;. If you want to store it in &lsquo;lis&rsquo; itself replace a with lis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using modular arithmetic]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/20/using-modular-arithmetic/"/>
    <updated>2013-07-20T11:13:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/20/using-modular-arithmetic</id>
    <content type="html"><![CDATA[<p>Using modular arithmetic for various purposes.(In python)</p>

<p>1.) If you want the decimal part of a number use mod operator.</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> pi = 3.14159
</span><span class='line'>
</span><span class='line'>>>> pi % 1
</span><span class='line'>    .14159</span></code></pre></td></tr></table></div></figure>


<p>2.) If you want the digit in one&rsquo;s place and the most significant digit.</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> a = 12
</span><span class='line'>
</span><span class='line'>>>> a % 10
</span><span class='line'>    2
</span><span class='line'>
</span><span class='line'>>>> a / 10
</span><span class='line'>    1</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Primality testing]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/17/primality-testing/"/>
    <updated>2013-07-17T13:28:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/17/primality-testing</id>
    <content type="html"><![CDATA[<p>Here we are checking the prime numbers from 1 to 10**5. In both the methods we store the calculated prime numbers in a list and are used for calculating other prime numbers. I have used timeit module to check the execution time. The time is in seconds.</p>

<p>1.) In the first method we use lists which contain the prime numbers that are calculated.
We divide the number(n) by prime numbers less than half of the number(n/2).</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from timeit import time
</span><span class='line'>
</span><span class='line'>primeno = []
</span><span class='line'>
</span><span class='line'>def prime(n):
</span><span class='line'>  for i in xrange(2, n + 1):
</span><span class='line'>    count = 0
</span><span class='line'>    for j in primeno:
</span><span class='line'>      if i % j == 0 and j &lt;= (i/2)+1:
</span><span class='line'>        count += 1
</span><span class='line'>        break
</span><span class='line'>    if count == 0:
</span><span class='line'>      primeno.append(i)
</span><span class='line'>
</span><span class='line'>start_time = time.time()
</span><span class='line'>prime(10**5)
</span><span class='line'>end_time = time.time()
</span><span class='line'>total_time = end_time - start_time # Time in seconds
</span><span class='line'>#print primeno
</span><span class='line'>print 'Total time:', total_time</span></code></pre></td></tr></table></div></figure>


<p>2.) In this method also we use lists but we divide the number(n) by the prime numbers which are less than the square root of the number(sqrt(n)).</p>

<figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import math
</span><span class='line'>from timeit import time
</span><span class='line'>
</span><span class='line'>primeno = []
</span><span class='line'>
</span><span class='line'>def prime(n):
</span><span class='line'>    for i in xrange(2, n + 1):
</span><span class='line'>        sq = math.sqrt(i)
</span><span class='line'>        count = 0
</span><span class='line'>        for j in primeno:
</span><span class='line'>            if j > sq + 1:
</span><span class='line'>                break
</span><span class='line'>            if i % j == 0:
</span><span class='line'>                count += 1
</span><span class='line'>                break
</span><span class='line'>        if count == 0:
</span><span class='line'>            primeno.append(i)
</span><span class='line'>
</span><span class='line'>start_time = time.time()
</span><span class='line'>prime(10**5)
</span><span class='line'>end_time = time.time()
</span><span class='line'>total_time = end_time - start_time # Time in seconds
</span><span class='line'>#print primeno
</span><span class='line'>print 'Total time:', total_time</span></code></pre></td></tr></table></div></figure>


<p>Surely the second program runs faster. Run the program and see for yourself the difference in time between the two.
If you want the prime numbers just uncomment the line &ldquo;#print primeno&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspect and timeit module]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/14/inspect-and-timeit-module/"/>
    <updated>2013-07-14T15:45:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/14/inspect-and-timeit-module</id>
    <content type="html"><![CDATA[<p>If you ever wondered how a certain function is implemented for ex: gcd(), there is just a module for this. If you want to have a look at the source of a module, you can do it in the following way.</p>

<figure class='code'><figcaption><span>Inspect a module lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import inspect
</span><span class='line'>from fractions import gcd
</span><span class='line'>print inspect.getsource(gcd)</span></code></pre></td></tr></table></div></figure>


<p>gcd is used to find the greatest common divisor.
replace gcd with your own function.</p>

<p>If you want to find the execution time of a function, you can use the timeit module. A simple use of timeit module is shown below.</p>

<figure class='code'><figcaption><span>Timeit module lang: python</span><a href='http://docs.python.org/2/library/timeit.html'>python docs</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def test():
</span><span class='line'>    a = 0
</span><span class='line'>    for i in range(100):
</span><span class='line'>  a += i
</span><span class='line'>
</span><span class='line'>if __name__ == "__main__":
</span><span class='line'>    print (timeit.timeit("test()", setup="from __main__ import test", number=100))</span></code></pre></td></tr></table></div></figure>


<p>The output is the execution time in seconds.
For more on timeit module check the python docs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[find and replace in python]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/13/find-and-replace-in-python/"/>
    <updated>2013-07-13T22:51:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/13/find-and-replace-in-python</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>find and replace lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def find_replace(string, find, replace):
</span><span class='line'>    len_find = len(find)
</span><span class='line'>    len_replace = len(replace)
</span><span class='line'>    st = string
</span><span class='line'>    for i in range(len(string) - len(find) + 1):
</span><span class='line'>        if string[i:i+len_find] == find:
</span><span class='line'>            st = st[:i] + replace + st[i+len_find:]
</span><span class='line'>    return st    
</span><span class='line'>
</span><span class='line'>string = 'john'
</span><span class='line'>find = 'n'
</span><span class='line'>replace = 'nn'
</span><span class='line'>print find_replace(string, find, replace)</span></code></pre></td></tr></table></div></figure>


<p>This program can find string of any length and replace it with any string. If you have any better program please put it in the comments.
Change the value of string if you want any custom string, similarly change the find and replace variables.</p>
]]></content>
  </entry>
  
</feed>
