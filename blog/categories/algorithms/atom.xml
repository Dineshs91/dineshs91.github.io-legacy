<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithms | My code … :) :)]]></title>
  <link href="http://Dineshs91.github.io/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://Dineshs91.github.io/"/>
  <updated>2014-06-07T23:42:13+05:30</updated>
  <id>http://Dineshs91.github.io/</id>
  <author>
    <name><![CDATA[DINESH S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Increasing pattern in binary]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/05/10/increasing-pattern-in-binary/"/>
    <updated>2014-05-10T11:57:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/05/10/increasing-pattern-in-binary</id>
    <content type="html"><![CDATA[<p>An useful trick which depends on the nature of binary numbers.</p>

<p>If we look at them, we can see the following pattern.</p>

<p>0, 1, 10, 11, 100, 101, 110, 111</p>

<p>We can see that they are in increasing order.
If we are interested in 2 digits, then this trick can come in very handy.
Take this example,</p>

<p>Find an integer X made up of 9&rsquo;s and 0&rsquo;s such that X is a multiple of N ?
X should contain 1 or more 9&rsquo;s and 0 or more 0&rsquo;s.</p>

<p>So we could use our trick here.</p>

<p>Just replace 1 with &lsquo;9&rsquo;.</p>

<p>algorithm:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>j = 1
</span><span class='line'>while int(str(bin(j)[2:]).replace('1','9')) %n != 0:
</span><span class='line'>    j += 1
</span><span class='line'>s = str(bin(j)[2:]).replace('1','9')
</span><span class='line'>print s
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
This will give the least positive integer X made up of only 9&rsquo;s and 0&rsquo;s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BFS]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/02/01/bfs/"/>
    <updated>2014-02-01T00:44:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/02/01/bfs</id>
    <content type="html"><![CDATA[<p>Breadth First Search (BFS).</p>

<p>BFS explores in levels. It explores all the nodes and then moves to the next node unlike DFS which explores the nodes of siblings until a node doesn’t have a sibling. BFS moves like a wave. Here a queue is used.</p>

<p>The path found using BFS is the shortest path. BFS takes less time than DFS to explore. But it can take more memory which depends on the branching factor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibonacci number]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/31/fibonacci-number/"/>
    <updated>2014-01-31T23:59:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/31/fibonacci-number</id>
    <content type="html"><![CDATA[<p>A number is a fibonacci number if 5*N2 +&ndash; 4 is a perfect square. sqrt(r1) % 1 == 0. This is for checking if the number is a perfect square.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>r1 = sqrt(5&lt;em>n**2+4)
</span><span class='line'>r2 = sqrt(5&lt;/em>n**2-4)
</span><span class='line'>isSquare = r1 % 1 == 0 or r2 % 1 == 0
</span><span class='line'>if(isSquare):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print “isFibo”
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DFS Demystified]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/11/dfs-demystified/"/>
    <updated>2014-01-11T19:29:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/11/dfs-demystified</id>
    <content type="html"><![CDATA[<p>Depth First Search (DFS).</p>

<p>A DFS explores a path all the way to a leaf before backtracking and exploring another path.</p>

<p>DFS always expands one of the nodes at the deepest level of the tree.
The search goes back once it hits a dead end.</p>

<p>Strategy of DFS is to search deeper in the graph whenever possible.</p>

<p>DFS progresses by expanding the first child node of the search tree that appears and thus going deeper and deeper until a goal node is found, or until it hits a node that has no children. Then the search backtracks, returning to the most recent node it hasn’t finished exploring.</p>

<p>Advantages of DFS:</p>

<ol>
<li>It is cheap on memory.</li>
<li>It can use recursion.</li>
<li>It is better when there are many solution nodes.</li>
</ol>


<p>Performance parameters:</p>

<ol>
<li>Completeness: Is algorithm guaranteed to find a solution if one exists.</li>
<li>Optimality: Whether the algorithm finds the optimal solution.</li>
<li>Time complexity: How long the algorithm takes the find the solution.</li>
<li>Space complexity: How much memory is needed.</li>
</ol>


<p>Measuring complexity:</p>

<ol>
<li>Branching factor(b): Maximum number of successors of any node.</li>
<li>Depth(m): Shallowest goal node in number of steps or levels.</li>
<li>Maximum depth: Maximum depth of the search tree.</li>
</ol>


<p>Analysis:</p>

<p>Time: O(|V| + |E|)
Space: O(|V|)</p>

<p>Application:</p>

<p>Search problems in artificial intelligence.</p>

<p>Algorithm:</p>

<p>Visit a node, then push all of the nodes to be visited onto the stack. To find the next node to visit we simply pop a node of the stack, and then push all the nodes connected to that one onto the stack as well and we continue doing this until all nodes are visited.</p>

<p>There are 2 ways of doing this.</p>

<ol>
<li><p>Using stack.</p></li>
<li><p>Using recursion.</p></li>
</ol>


<p>DFS(v):</p>

<pre><code>visited[v] = 1
for all w adjacent to v:
    if !visited:
        DFS(w)
</code></pre>
]]></content>
  </entry>
  
</feed>
