<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | My code â€¦ :) :)]]></title>
  <link href="http://Dineshs91.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://Dineshs91.github.io/"/>
  <updated>2013-07-09T15:42:53+05:30</updated>
  <id>http://Dineshs91.github.io/</id>
  <author>
    <name><![CDATA[DINESH S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trying python in browser]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/09/trying-python-in-browser/"/>
    <updated>2013-07-09T15:31:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/09/trying-python-in-browser</id>
    <content type="html"><![CDATA[<p>You can use these sites to test your python code.</p>

<p><a href="http://repl.it">http://repl.it</a></p>

<p><img src="/images/repl.png" /></p>

<p><a href="http://www.codeskulptor.org">http://www.codeskulptor.org</a>
<img src="/images/codeskulptor.png" /></p>

<p>or try code mirror
<a href="http://codemirror.net/">http://codemirror.net/</a></p>

<p>skulpt is another program that can run in browser. This is an entirely in browser implementation of python.
<a href="http://www.skulpt.org/">http://www.skulpt.org/</a></p>

<p>Note: They may not have all the functionalities. Check the documentation for supported features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[objects in python]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/09/objects-in-python/"/>
    <updated>2013-07-09T11:37:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/09/objects-in-python</id>
    <content type="html"><![CDATA[<p>Objects are used to access the methods of a class. Take a look at the following code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>objects in python lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class Students(object):
</span><span class='line'>  def &lt;strong>init&lt;/strong>(self, name, no):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>self.name = name
</span><span class='line'>self.no = no
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  def display(self):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print 'Student name: %s and no: %d' %(self.name, self.no)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>student1 = Students(&lsquo;mike&rsquo;, 15)
</span><span class='line'>student1.display()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this code student1 is the object. <strong>init</strong> is like constructor in c which is used to initialise the data. The name self holds the object itself. In this code &lsquo;self&rsquo; is the object student1. You can create as many objects as you like.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/05/python/"/>
    <updated>2013-07-05T23:59:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/05/python</id>
    <content type="html"><![CDATA[<p>Python is an awesome scripting language. If you start learning python then you can wave goodbye to braces. Python is all about indentation. Python code is very clear and easy to understand. There are two versions of python you can choose from python 2 and python 3. Python 3 is the latest one but python 2 is also receiving updates and most of them use python 2. Its your choice to start with python 2 or 3. Let&rsquo;s talk about python in detail in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learning python]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/05/learning-python/"/>
    <updated>2013-07-05T23:48:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/05/learning-python</id>
    <content type="html"><![CDATA[<p>There are a lot of ways to learn python</p>

<p>The first way is to learn from the python official website &lsquo;python.org&rsquo;. Check the documentation section for tutorials. These tutorials are great and is a very good starting  point. All the basic concepts are there with sample examples.And the great thing about python is you can run the code in the terminal itself without having to create a new file each time you want to test a code. Just type python in terminal and you have an interpreter. You can run all the commands there.</p>

<p>Next have a look at &lsquo;learnpythonthehardway&rsquo; site. It also provides some good tutorials.</p>

<p>After learning the basics check this site &ldquo;<a href="http://code.activestate.com/recipes/langs/python/">http://code.activestate.com/recipes/langs/python/</a>&rdquo;. It has great python programs. Learn from others code look what libraries they are using. The best to way learn programming is by looking at others code and learn.</p>
]]></content>
  </entry>
  
</feed>
