<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | My code â€¦ :) :)]]></title>
  <link href="http://Dineshs91.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://Dineshs91.github.io/"/>
  <updated>2013-07-20T11:27:45+05:30</updated>
  <id>http://Dineshs91.github.io/</id>
  <author>
    <name><![CDATA[DINESH S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[using modular arithmetic]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/20/using-modular-arithmetic/"/>
    <updated>2013-07-20T11:13:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/20/using-modular-arithmetic</id>
    <content type="html"><![CDATA[<p>Using modular arithmetic for various purposes.(In python)</p>

<ol>
<li>If you want the decimal part of a number use mod operator.</li>
</ol>


<blockquote><blockquote><blockquote><p>pi = 3.14159</p>

<p>pi % 1</p>

<pre><code>.14159
</code></pre></blockquote></blockquote></blockquote>

<ol>
<li>If you want the digit in one&rsquo;s place and the most significant digit.</li>
</ol>


<blockquote><blockquote><blockquote><p>a = 12</p>

<p>a % 10</p>

<pre><code>2
</code></pre>

<p>a / 10</p>

<pre><code>1
</code></pre></blockquote></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Primality testing]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/17/primality-testing/"/>
    <updated>2013-07-17T13:28:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/17/primality-testing</id>
    <content type="html"><![CDATA[<p>Here we are checking the prime numbers from 1 to 10**5. In both the methods we store the calculated prime numbers in a list and are used for calculating other prime numbers. I have used timeit module to check the execution time. The time is in seconds.</p>

<ol>
<li>In the first method we use lists which contain the prime numbers that are calculated.
We divide the number(n) by prime numbers less than half of the number(n/2).</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from timeit import time&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>primeno = []&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def prime(n):
</span><span class='line'>  for i in xrange(2, n + 1):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>count = 0
</span><span class='line'>for j in primeno:
</span><span class='line'>  if i % j == 0 and j &lt;= (i/2)+1:
</span><span class='line'>    count += 1
</span><span class='line'>    break
</span><span class='line'>if count == 0:
</span><span class='line'>  primeno.append(i)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>start_time = time.time()
</span><span class='line'>prime(10**5)
</span><span class='line'>end_time = time.time()
</span><span class='line'>total_time = end_time &ndash; start_time # Time in seconds&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>print primeno&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>print &lsquo;Total time:&rsquo;, total_time</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>In this method also we use lists but we divide the number(n) by the prime numbers which are less than the square root of the number(sqrt(n)).</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import math
</span><span class='line'>from timeit import time&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>primeno = []&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def prime(n):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>for i in xrange(2, n + 1):
</span><span class='line'>    sq = math.sqrt(i)
</span><span class='line'>    count = 0
</span><span class='line'>    for j in primeno:
</span><span class='line'>        if j &gt; sq + 1:
</span><span class='line'>            break
</span><span class='line'>        if i % j == 0:
</span><span class='line'>            count += 1
</span><span class='line'>            break
</span><span class='line'>    if count == 0:
</span><span class='line'>        primeno.append(i)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>start_time = time.time()
</span><span class='line'>prime(10**5)
</span><span class='line'>end_time = time.time()
</span><span class='line'>total_time = end_time &ndash; start_time # Time in seconds&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>print primeno&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>print &lsquo;Total time:&rsquo;, total_time&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Surely the second program runs faster. Run the program and see for yourself the difference in time between the two.
If you want the prime numbers just uncomment the line &ldquo;#print primeno&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspect and timeit module]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/14/inspect-and-timeit-module/"/>
    <updated>2013-07-14T15:45:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/14/inspect-and-timeit-module</id>
    <content type="html"><![CDATA[<p>If you ever wondered how a certain function is implemented for ex: gcd(), there is just a module for this. If you want to have a look at the source of a module, you can do it in the following way.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Inspect a module lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import inspect
</span><span class='line'>from fractions import gcd
</span><span class='line'>print inspect.getsource(gcd)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>gcd is used to find the greatest common divisor.
replace gcd with your own function.</p>

<p>If you want to find the execution time of a function, you can use the timeit module. A simple use of timeit module is shown below.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Timeit module lang: python <a href="http://docs.python.org/2/library/timeit.html">http://docs.python.org/2/library/timeit.html</a> python docs</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>def test():<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>a = 0
</span><span class='line'>for i in range(100):
</span><span class='line'>a += i
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>if <span class="nt">&lt;strong&gt;</span>name<span class="nt">&lt;/strong&gt;</span> == <span class="ni">&amp;ldquo;</span><span class="nt">&lt;strong&gt;</span>main<span class="nt">&lt;/strong&gt;</span><span class="ni">&amp;rdquo;</span>:<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>print (timeit.timeit(&quot;test()&quot;, setup=&quot;from __main__ import test&quot;, number=100))
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The output is the execution time in seconds.
For more on timeit module check the python docs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[find and replace in python]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/13/find-and-replace-in-python/"/>
    <updated>2013-07-13T22:51:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/13/find-and-replace-in-python</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>find and replace lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def find_replace(string, find, replace):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>len_find = len(find)
</span><span class='line'>len_replace = len(replace)
</span><span class='line'>st = string
</span><span class='line'>for i in range(len(string) - len(find) + 1):
</span><span class='line'>    if string[i:i+len_find] == find:
</span><span class='line'>        st = st[:i] + replace + st[i+len_find:]
</span><span class='line'>return st    
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>string = &lsquo;john&rsquo;
</span><span class='line'>find = &lsquo;n&rsquo;
</span><span class='line'>replace = &lsquo;nn&rsquo;
</span><span class='line'>print find_replace(string, find, replace)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This program can find string of any length and replace it with any string. If you have any better program please put it in the comments.
Change the value of string if you want any custom string, similarly change the find and replace variables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying python in browser]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/09/trying-python-in-browser/"/>
    <updated>2013-07-09T15:31:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/09/trying-python-in-browser</id>
    <content type="html"><![CDATA[<p>You can use these sites to test your python code.</p>

<p><a href="http://repl.it">http://repl.it</a></p>

<p><img src="/images/repl.png" /></p>

<p><a href="http://www.codeskulptor.org">http://www.codeskulptor.org</a>
<img src="/images/codeskulptor.png" /></p>

<p>or try code mirror
<a href="http://codemirror.net/">http://codemirror.net/</a></p>

<p>skulpt is another program that can run in browser. This is an entirely in browser implementation of python.
<a href="http://www.skulpt.org/">http://www.skulpt.org/</a></p>

<p>Note: They may not have all the functionalities. Check the documentation for supported features.</p>
]]></content>
  </entry>
  
</feed>
