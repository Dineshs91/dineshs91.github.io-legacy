<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | My code â€¦ :) :)]]></title>
  <link href="http://Dineshs91.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://Dineshs91.github.io/"/>
  <updated>2013-07-14T16:28:23+05:30</updated>
  <id>http://Dineshs91.github.io/</id>
  <author>
    <name><![CDATA[DINESH S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Inspect a module]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/14/inspect-a-module/"/>
    <updated>2013-07-14T15:45:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/14/inspect-a-module</id>
    <content type="html"><![CDATA[<p>If you want to have a look at the source of a module, you can do this in the following way.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Inspect a module lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import inspect
</span><span class='line'>from fractions import gcd
</span><span class='line'>print inspect.getsource(gcd)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>gcd is used to find the greatest common divisor.</p>

<p>Use the timeit module to view the running time.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Timeit module lang: python <a href="http://docs.python.org/2/library/timeit.html">http://docs.python.org/2/library/timeit.html</a> python docs</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>def test():<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>a = 0
</span><span class='line'>for i in range(100):
</span><span class='line'>a += i
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>if <span class="nt">&lt;strong&gt;</span>name<span class="nt">&lt;/strong&gt;</span> == <span class="ni">&amp;ldquo;</span><span class="nt">&lt;strong&gt;</span>main<span class="nt">&lt;/strong&gt;</span><span class="ni">&amp;rdquo;</span>:<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>print (timeit.timeit(&quot;test()&quot;, setup=&quot;from __main__ import test&quot;, number=100))
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The output is the execution time in seconds</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[find and replace in python]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/13/find-and-replace-in-python/"/>
    <updated>2013-07-13T22:51:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/13/find-and-replace-in-python</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>find and replace lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def find_replace(string, find, replace):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>len_find = len(find)
</span><span class='line'>len_replace = len(replace)
</span><span class='line'>st = string
</span><span class='line'>for i in range(len(string) - len(find) + 1):
</span><span class='line'>    if string[i:i+len_find] == find:
</span><span class='line'>        st = st[:i] + replace + st[i+len_find:]
</span><span class='line'>return st    
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>string = &lsquo;john&rsquo;
</span><span class='line'>find = &lsquo;n&rsquo;
</span><span class='line'>replace = &lsquo;nn&rsquo;
</span><span class='line'>print find_replace(string, find, replace)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This program can find string of any length and replace it with any string. If you have any better program please put it in the comments.
Change the value of string if you want any custom string, similarly change the find and replace variables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying python in browser]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/09/trying-python-in-browser/"/>
    <updated>2013-07-09T15:31:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/09/trying-python-in-browser</id>
    <content type="html"><![CDATA[<p>You can use these sites to test your python code.</p>

<p><a href="http://repl.it">http://repl.it</a></p>

<p><img src="/images/repl.png" /></p>

<p><a href="http://www.codeskulptor.org">http://www.codeskulptor.org</a>
<img src="/images/codeskulptor.png" /></p>

<p>or try code mirror
<a href="http://codemirror.net/">http://codemirror.net/</a></p>

<p>skulpt is another program that can run in browser. This is an entirely in browser implementation of python.
<a href="http://www.skulpt.org/">http://www.skulpt.org/</a></p>

<p>Note: They may not have all the functionalities. Check the documentation for supported features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[objects in python]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/09/objects-in-python/"/>
    <updated>2013-07-09T11:37:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/09/objects-in-python</id>
    <content type="html"><![CDATA[<p>Objects are used to access the methods of a class. Take a look at the following code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>objects in python lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class Students(object):
</span><span class='line'>  def &lt;strong>init&lt;/strong>(self, name, no):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>self.name = name
</span><span class='line'>self.no = no
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  def display(self):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print 'Student name: %s and no: %d' %(self.name, self.no)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>student1 = Students(&lsquo;mike&rsquo;, 15)
</span><span class='line'>student1.display()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this code student1 is the object. <strong>init</strong> is like constructor in c which is used to initialise the data. The name self holds the object itself. In this code &lsquo;self&rsquo; is the object student1. You can create as many objects as you like.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/07/05/python/"/>
    <updated>2013-07-05T23:59:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/07/05/python</id>
    <content type="html"><![CDATA[<p>Python is an awesome scripting language. If you start learning python then you can wave goodbye to braces. Python is all about indentation. Python code is very clear and easy to understand. There are two versions of python you can choose from python 2 and python 3. Python 3 is the latest one but python 2 is also receiving updates and most of them use python 2. Its your choice to start with python 2 or 3. Let&rsquo;s talk about python in detail in the next post.</p>
]]></content>
  </entry>
  
</feed>
