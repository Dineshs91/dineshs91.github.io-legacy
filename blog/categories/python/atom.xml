<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | My code … :) :)]]></title>
  <link href="http://Dineshs91.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://Dineshs91.github.io/"/>
  <updated>2014-07-01T21:57:52+05:30</updated>
  <id>http://Dineshs91.github.io/</id>
  <author>
    <name><![CDATA[DINESH S]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Check dependencies]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/06/15/check-dependencies/"/>
    <updated>2014-06-15T16:01:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/06/15/check-dependencies</id>
    <content type="html"><![CDATA[<p>I have seen a lot of projects on github. Almost all of them, just specify the external packages required
for that project. The bad thing about dependencies is that, it&rsquo;s not enough if you just have that package,
but you should have a version that the project uses.</p>

<p>Let&rsquo;s take a scenario to understand this better:</p>

<p>Let&rsquo;s say there is a project &lsquo;Ringo&rsquo; in github. I as a developer, decide to contribute to this project.
The first thing I will do is, fork that project. Then I clone it to my laptop. The next step, I will run
the test cases to check if everything works. But before, I have to get all of the dependencies. I have to
check all of the libraries, whether they are there or do I have to update. After checking, I install the
missing dependencies manually.</p>

<p>what if there are a lot of dependencies ? Now checking each one becomes tedious.</p>

<p>What i suggest:</p>

<p>Create a file, which when executed checks for all the dependencies present in your laptop and displays which
dependencies you have and which dependencies(with version no.) you need to install.</p>

<p>Advantage:</p>

<p>Let&rsquo;s consider the previous scenario again. After I clone the project to my laptop, the next step I will
do is, to run the check_dependencies.py file. It displays what versions of dependencies I have and what are
actually needed for that project. This reduces the manual checking part. I just have to install the
dependencies that do not match the version used by the project.</p>

<p>You can think that, the projects have a requirements.txt file, is that not sufficient.
Yes it is sufficient. That is just a text file. But my idea, is more than just text. It can have logic.</p>

<p>Think about this.</p>

<p>In requirements.txt there is a dependency on python-2.7 and I have python-2.6 in my system. The project will also work for python-2.6. But in requirements they cannot specify
that.</p>

<p>So if you do $ pip install -r requirements.txt</p>

<p>you end up installing python-2.7 even though you can work on python-2.6
I am just taking the same concept to the next level.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exor sum of all non empty subsets in a list]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/03/16/exor-sum-of-all-non-empty-subsets-in-a-list/"/>
    <updated>2014-03-16T12:33:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/03/16/exor-sum-of-all-non-empty-subsets-in-a-list</id>
    <content type="html"><![CDATA[<p>Consider one bit position at a time. How many of the terms have bit i set? The terms that have bit i set are exactly those that correspond to a subset that contains an odd number of inputs that have bit i set.</p>

<p>If there is any input that has bit i set, then exactly half of the 2N possible subsets will be of this form, and so they will contribute 2N−1+i to the final sum.</p>

<p>On the other hand, if no input has bit i set, then of course no terms will have that bit set either.</p>

<p>Summing these contributions of 2N−1+i per bit position is easy enough &mdash; the final sum will simply be 2N−1 times the bitwise OR of all the inputs.</p>

<p>soon: (2 ** (N &ndash; 1)) * bitwise OR of all the inputs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sieve of eratosthenes]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/03/09/sieve-of-eratosthenes/"/>
    <updated>2014-03-09T14:02:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/03/09/sieve-of-eratosthenes</id>
    <content type="html"><![CDATA[<p>Sieve of eratosthenes is used to find the prime numbers.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def sieve(limit):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>p = [True] * limit
</span><span class='line'>p[0] = p[1] = False
</span><span class='line'>for i, isprime in enumerate(p):
</span><span class='line'>    if isprime:
</span><span class='line'>        for n in xrange(i * i, limit, i):
</span><span class='line'>            p[n] = False
</span><span class='line'>return p
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>p = sieve(100)
</span><span class='line'>for i, j in enumerate(p):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print i,’—&gt;’,j
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>sieve(100) &ndash; Has a list of first 100 numbers and whether they are prime or not.</p>

<p>Runtime: O(log log n)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usage of defaultdict]]></title>
    <link href="http://Dineshs91.github.io/blog/2014/01/14/usage-of-defaultdict/"/>
    <updated>2014-01-14T08:55:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2014/01/14/usage-of-defaultdict</id>
    <content type="html"><![CDATA[<p>defaultdict is a built in function in python. It is available in collections package.</p>

<p>1.) 1st usage. If you want to know the frequency of characters in a word,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>from collections import defaultdict&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>a = “Amazon”
</span><span class='line'>res = defaultdict(int)
</span><span class='line'>for k in a:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>res[k] += 1
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>print res&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The result is {&lsquo;A&rsquo;: 1, &rsquo;m': 1, &lsquo;a&rsquo;: 1, &lsquo;z&rsquo;: 1, &lsquo;o&rsquo;: 1, &lsquo;n&rsquo;: 1}
This program is case sensitive so it counts ‘A’ and ‘a’ seperately. If you want the program to be case insensitive just change to a.lower() in for loop.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>from collections import defaultdict&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>a = “Amazon”
</span><span class='line'>res = defaultdict(int)
</span><span class='line'>for k in a.lower():&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>res[k] += 1
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>print res&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The result is {&lsquo;a&rsquo;: 2, &rsquo;m': 1, &lsquo;z&rsquo;: 1, &lsquo;o&rsquo;: 1, &lsquo;n&rsquo;: 1}</p>

<p>2.) Using a list in defaultdict.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang: python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>s = [(‘yellow’, 1), (‘blue’, 2), (‘yellow’, 3), (‘blue’, 4)]
</span><span class='line'>d = defaultdict(list)
</span><span class='line'>for k, v in s:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>d[k].append(v)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The result is [(&lsquo;blue&rsquo;, [2, 4]), (&lsquo;yellow&rsquo;, [1, 3])]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[alphabet-frequency]]></title>
    <link href="http://Dineshs91.github.io/blog/2013/08/07/alphabet-frequency/"/>
    <updated>2013-08-07T15:28:00+05:30</updated>
    <id>http://Dineshs91.github.io/blog/2013/08/07/alphabet-frequency</id>
    <content type="html"><![CDATA[<p>Alphabet-frequency is a program i have written using python2.7 which graphically displays the frequency of letters in a specified file.
You can have a look at <a href="https://github.com/Dineshs91/alphabet-frequency">https://github.com/Dineshs91/alphabet-frequency</a> .</p>

<p>You require matplotlib and numpy modules to run this program.</p>

<p>In the first few lines i have imported the necessary modules. Matplotlib module is used for plotting data. arparse module is used for command line argument parsing.</p>

<p>There are a lot of options which you can provide. The default option is alphabets(lower and upper case). This is a very simple program. You can understand it by looking at the code itself. Output is a graph which shows how frequently a character appears in a file.</p>
]]></content>
  </entry>
  
</feed>
